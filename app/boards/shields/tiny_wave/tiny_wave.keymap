#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define M3      1
#define M4      2

#define TAPPING_TERM 300
#define PRIOR_IDLE_TIME 150
#define QUICK_TAP_TIME 300 

#define MEH LS(LA(LCTL))

/ {
    behaviors {
        lhr: left_hand_positional_hold_tap_super {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP_SUPER";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM>;        // <---[[produces hold if held longer than tapping-term-ms]]
            quick-tap-ms = <QUICK_TAP_TIME>;           // if same button is pressed again after this amount of time it is a tap automatically
            require-prior-idle-ms = <PRIOR_IDLE_TIME>;  // only allow hold behavior if no other key was pressed for this amount of time
            hold-trigger-key-positions = <6 7 8 9 10 18 19 20 21 22 29 30 31 32 33 34 35 36 37 38 39>;    // <---[[right-hand keys + thumbs]]
            hold-trigger-on-release;        // eveluate hold trigger on release -> this enables combining different modifiers by holding different keys
            bindings = <&kp>, <&kp>;
        };
        rhr: right_hand_positional_hold_tap_super {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP_SUPER";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM>;        // <---[[produces hold if held longer than tapping-term-ms]]
            quick-tap-ms = <QUICK_TAP_TIME>;           // if same button is pressed again after this amount of time it is a tap automatically
            require-prior-idle-ms = <PRIOR_IDLE_TIME>;  // only allow hold behavior if no other key was pressed for this amount of time
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <1 2 3 4 5 13 14 15 16 17 24 25 26 27 28 34 35 36 37 38 39>;    // <---[[left-hand keys]]
            hold-trigger-on-release;        // eveluate hold trigger on release -> this enables combining different modifiers by holding different keys
        };
        qlt: quick_tap_enabled_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_LAYER_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
        rst: reset_or_bootload {
            compatible = "zmk,behavior-hold-tap";
            label = "RESET_OR_BOOTLOAD";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <200>;
            bindings = <&sys_reset>, <&bootloader>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&bt BT_NXT &kp X        &kp V        &kp L          &kp C          &kp W             &kp K         &kp H          &kp G        &kp F        &kp Q       &bt BT_CLR
&rst 0 0   &lhr LGUI  U &lhr LALT I  &lhr LCTL A    &lhr LSHIFT E  &kp O             &kp S         &rhr LSHIFT N  &rhr LCTL R  &rhr LALT T  &rhr LGUI D &rst 0 0 
           &kp Y        &kp DQT      &kp DQT        &kp P          &kp Z             &kp B         &kp M          &kp COMMA    &kp DOT      &kp J
                                     &qlt M3 RET    &qlt M4 BSPC   &lhr MEH ESC      &rhr MEH TAB  &qlt M4 SPC   &qlt M3 DEL
            >;
        };

        m3_layer {
            bindings = <
&trans  &none     &kp UNDER  &kp LBKT  &kp RBKT   &kp CARET      &kp EXCL   &kp LT     &kp GT    &kp EQUAL  &kp AMPS   &trans
&trans  &kp BSLH  &kp FSLH   &kp LBRC  &kp RBRC   &kp STAR       &kp QMARK  &kp LPAR   &kp RPAR  &kp MINUS  &kp COLON  &trans
        &kp HASH  &kp DLLR   &kp PIPE  &kp TILDE  &kp GRAVE      &kp PLUS   &kp PRCNT  &kp DQT   &kp SQT    &kp SEMI
                             &trans    &trans     &trans         &trans     &trans     &trans
            >;
        };
        m4_layer {
            bindings = <
&trans &kp PG_UP       &kp BSPC       &kp UP         &kp DEL           &kp PG_DN     &kp KP_MULTIPLY &kp N7         &kp N8       &kp N9       &kp KP_PLUS  &trans
&trans &lhr LGUI HOME  &lhr LALT LEFT &lhr LCTL DOWN &lhr LSHIFT RIGHT &kp END       &kp KP_DIVIDE   &rhr LSHIFT N4 &rhr LCTL N5 &rhr LALT N6 &rhr LGUI KP_MINUS &trans
       &kp ESC         &kp TAB        &kp INSERT     &kp RET           &none         &kp N0          &kp N1         &kp N2       &kp N3       &kp KP_DOT
                                      &trans         &trans            &trans        &trans          &trans         &trans
            >;
        };
    };
};
